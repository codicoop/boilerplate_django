# Generated by Django 2.2.9 on 2020-01-24 16:37

from django.db import migrations, models
from django.contrib.postgres.operations import UnaccentExtension

import environ
env = environ.Env()
environ.Env.read_env()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    def generate_superuser(apps, schema_editor):
        from apps.users.models import User

        DJANGO_SUPERUSER_EMAIL = env('DJANGO_SUPERUSER_EMAIL')
        DJANGO_SUPERUSER_PASSWORD = env('DJANGO_SUPERUSER_PASSWORD')

        # Es crea nom√©s si les dues variables estan posades
        if DJANGO_SUPERUSER_EMAIL and DJANGO_SUPERUSER_PASSWORD:
            User.objects.create_superuser(
                email=DJANGO_SUPERUSER_EMAIL,
                password=DJANGO_SUPERUSER_PASSWORD
            )
        else:
            print("Superuser data is not set: superuser will not be created.")

    operations = [
        UnaccentExtension(),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(generate_superuser)
    ]
