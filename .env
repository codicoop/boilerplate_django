################################################################################
#                        General project variables                             #
################################################################################
# https://docs.djangoproject.com/en/4.1/ref/settings/#debug
# Determines whether Django will run on debug mode or not. Remember to set it
# to false in production.
DEBUG=true

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SECRET_KEY
# You should generate a random string for this value in production.
# You can do so by running: ./run secret
SECRET_KEY=unsecure_key_for_development

# https://docs.djangoproject.com/en/4.1/ref/settings/#allowed-hosts
# A comma separated list of allowed hosts. In production this should be the
# domain name, such as "www.esguard.com,esguard.com".
ALLOWED_HOSTS=localhost
#ALLOWED_HOSTS="*"

# Custom env variable. Allows the project to access the absolute root URL.
ABSOLUTE_URL=http://localhost:8001

# Superuser
# If set, these will make the initial migration to create a superuser. Make sure
# to never leave the superuser account with the password unchanged if you use
# this. Check the related migration and management command for more info.
DJANGO_SUPERUSER_EMAIL=admin@admin.com
DJANGO_SUPERUSER_PASSWORD=admin

# To enable or disable maintenance mode.
MAINTENANCE_MODE=false

################################################################################
#                          Database variables                                  #
################################################################################

# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Postgres uses DB_USER and DB_PASSWORD for its default database.
DB_USER=postgres
DB_PASSWORD=password
DB_NAME=postgres
DB_HOST=develop_django_boilerplate_db
#DB_PORT=5432

################################################################################
#                           Email sending variables                            #
################################################################################

# The recipient (or from) address of any message sent by the app.
DEFAULT_FROM_EMAIL=aa@example.com

# By default uses the Post Office's backend. If changed to one of Django's
# backend, remember to set the EMAIL_* variables down below.
EMAIL_BACKEND=post_office.EmailBackend

# You'll want the console backend for development, and the SendgridBackend
# for production, or to test proper Sendgrid connection during preproduction.
POST_OFFICE_DEFAULT_BACKEND=django.core.mail.backends.console.EmailBackend
#POST_OFFICE_DEFAULT_BACKEND=django.core.mail.backends.smtp.EmailBackend
#POST_OFFICE_DEFAULT_BACKEND=sendgrid_backend.SendgridBackend

# Priority: 'now': emails sent immediately. 'medium': emails handled by Celery.
POST_OFFICE_DEFAULT_PRIORITY=medium

# Set this to the sender's domain
POST_OFFICE_MESSAGE_ID_FQDN=example.com

# Set whether Post Office should use Celery as a task manager.
POST_OFFICE_CELERY_ENABLED=true

# Sendgrid is the default SMTP service for this project. To create a new API 
# key, visit https://app.sendgrid.com/settings/api_keys
SENDGRID_API_KEY=
SENDGRID_SANDBOX_MODE_IN_DEBUG=false
SENDGRID_TRACK_EMAIL_OPENS=false
SENDGRID_TRACK_CLICKS_HTML=false
SENDGRID_TRACK_CLICKS_PLAIN=false

# This will usually not be needed, but use this in case you need a custom 
# SMTP server.
# EMAIL_HOST=mail.smtpserver.org
# EMAIL_PORT=587
# EMAIL_HOST_USER=aa@example.com
# EMAIL_HOST_PASSWORD=smtp_password
# EMAIL_USE_TLS=false
# EMAIL_USE_SSL=false

################################################################################
#                         Docker Compose variables                             #
################################################################################

# This variable let's you customize the project name that Compose will use.
# This will be changed by the "rename-project" script if used. This variable
# will have no effect unless the containers don't explicitly define a
# container_name.
#COMPOSE_PROJECT_NAME=django_boilerplate

# Volume path used for the app compose service. During development it should be
# set to mount the whole project directory. For production, you might want to
# set it to just some public assets.
DOCKER_APP_VOLUME=".:/app"

# The bind port for nginx.
# For staging, all projects run on the same preproduction server (codi.coop).
# Each project has a different port assigned. To see which ports are already in
# use, consult: https://trello.com/c/KEyjXoHV/572-server-develop-ports-etc
#
# Remember to also change the ABSOLUTE_URL variable if you change this port.
PROJECT_PORT=8001

# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
#export CELERY_LOG_LEVEL=info

# What should docker do in case the containers go down unexpectedly.
# For production, you might want the to be restarted unless expicitely told
# otherwise.
#export DOCKER_RESTART_POLICY=unless-stopped
DOCKER_RESTART_POLICY=no

################################################################################
#                              Other variables                                 #
################################################################################

# Connection string to Redis. For now, Redis only works as a message broker for
# Celery, but in the future it might also be used for caching.
REDIS_URL=redis://develop_django_boilerplate_redis:6379/0

# Sentry, an error monitoring service. To monitor your project on production,
# head to https://sentry.io/, create a new project and paste the DSN here.
#SENTRY_DSN=
