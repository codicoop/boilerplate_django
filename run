#!/usr/bin/env bash

set -o errexit
set -o pipefail

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

# Run docker compose exec.
function _dce {
  docker compose exec ${TTY} "${@}"
}

# Compose build, run and down. Used for installing things inside the containers.
# We run it inside the container for full isolation from our local machine.
function _build_run_down {
  docker compose build
  docker compose run ${TTY} "${@}"
  docker compose down
}

# -----------------------------------------------------------------------------
function up {
  docker compose up "${@}"
}

function down {
  docker compose down "${@}"
}

function cmd {
  # Run any command you want in the app container
  _dce app "${@}"
}

function manage {
  # Run any manage.py commands

  # We need to collectstatic before we run our tests.
  if [ "${1-''}" == "test" ]; then
    cmd python3 manage.py collectstatic --no-input
  fi

  cmd python3 manage.py "${@}"
}

function lint:dockerfile {
  # Lint Dockerfile
  docker container run --rm -i \
    hadolint/hadolint hadolint --ignore DL3008 --ignore DL4006 \
    -t style "${@}" - < Dockerfile
}

function lint {
  # Lint Python code
  cmd flake8 "${@}"
}

function format:imports {
  # Sort Python imports
  cmd isort . "${@}"
}

function format {
  # Format Python code
  cmd black . "${@}"
}

function quality {
  # Perform all code quality commands together
  format:imports
  format
  lint
}

function secret {
  # Generate a random secret that can be used for your SECRET_KEY and more
  cmd python3 -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
}

function shell {
  # Start a shell session in the web container
  cmd bash "${@}"
}

function psql {
  # Connect to PostgreSQL
  # shellcheck disable=SC1091
  . .env
  _dce db psql -U "${DB_USER}" "${@}"
}

function redis-cli {
  # Connect to Redis
  _dce redis redis-cli "${@}"
}

function ci:install-deps {
  # Install Continuous Integration (CI) dependencies
  sudo apt-get install -y curl shellcheck
}

function ci:test {
  # Execute Continuous Integration (CI) pipeline
  #
  # It's expected that your CI environment has these tools available:
  #   - https://github.com/koalaman/shellcheck
  shellcheck run bin/*
  lint:dockerfile "${@}"

  cp --no-clobber .env.example .env

  docker compose build
  docker compose up -d

  docker compose logs

  lint "${@}"
  format:imports --check
  format --check
  manage migrate
  manage test
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# Basically, run the script with help as the default argument, time it and
# print it.
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"